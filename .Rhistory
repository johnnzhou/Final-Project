filter(any_drinking, state == input_state) %>%
write.csv(paste0("output/", input_state, "_data.csv"),
row.names = FALSE)
}
# Demonstrate that you function works by passing "Utah" to the function
get_state_data("Utah")
############################ Binge drinking Dataset ############################
# In this section, you will ask a variety of questions regarding the
# `binge_drinking.csv` dataset. More specifically, you will analyze a subset of
# the observations of *just the counties* (exclude state/national estimates!).
# You will store your answers in a *named list*, and at the end of the section,
# Convert that list to a data frame, and write the data frame to a .csv file.
# Pay close attention to the *names* to be used in the list.
# Create a dataframe with only the county level observations from the
# `binge_driking.csv` dataset. You should (again) think of Washington D.C. as
# a state, and therefore *exclude it here*.
# However, you should include "county-like" areas such as parishes and borough
county_level <- filter(binge_drinking,
state != location,
location != "District Of Columbia",
location != "United States") %>%
select(-state)
# group_by(location)
# summarise_if(is.numeric, mean, na.rm = T)
# Create an empty list in which to store answers to the questions below.
stat_list <- list()
# What is the average county level of binge drinking in 2012 for both sexes?
# Store the number in your list as `avg_both_sexes`.
stat_list$avg_both_sexes <- mean(county_level$both_sexes_2012)
# What is the name of the county with the largest increase in male binge
# drinking between 2002 and 2012?
# Store the county name in your list as `largest_male_increase`.
stat_list$largest_male_increase <-
filter(county_level, males_2012 - males_2002 ==
max(males_2012 - males_2002))$location
# How many counties experienced an increase in male binge drinking between
# 2002 and 2012?
# Store the number in your list as `num_male_increase`.
stat_list$num_male_increase <-
nrow(filter(county_level, males_2012 - males_2002 > 0))
# What fraction of counties experienced an increase in male binge drinking
# between 2002 and 2012?
# Store the fraction (num/total) in your list as `frac_male_increase`.
stat_list$frac_male_increase <-
stat_list$num_male_increase / nrow(county_level)
# How many counties experienced an increase in female binge drinking between
# 2002 and 2012?
# Store the number in your list as `num_female_increase`.
stat_list$num_female_increase <-
nrow(filter(county_level, females_2012 - females_2002 > 0))         # ASK IF WE NEED TO EXCLUDE UNITED STATES AS A COUNTY.
# What fraction of counties experienced an increase in female binge drinking
# between 2002 and 2012?
# Store the fraction (num/total) in your list as `frac_female_increase`.
stat_list$frac_female_increase <-
stat_list$num_female_increase / nrow(county_level)
# How many counties experienced a rise in female binge drinking *and*
# a decline in male binge drinking?
# Store the number in your list as `num_f_increase_m_decrease`.
stat_list$num_f_increase_m_decrease <-
nrow(filter(county_level, females_2012 - females_2002 > 0,
males_2012 - males_2002 < 0))
# Convert your list to a data frame, and write the results
# to the file `binge_info.csv`
data.frame(stat_list) %>% write.csv("output/binge_info.csv")
# The next questions return *data frames as results*:
# What is the *minimum* level of binge drinking in each state in 2012 for
# both sexes (across the counties)? Your answer should contain roughly 50 values
# (one for each state), unless there are two counties in a state with the
# same value. Your answer should be a *dataframe* with the location, state, and
# 2012 binge drinking rate. Write this to a file called `min_binge.csv`.
minimum_binge <- group_by(binge_drinking, state) %>%
select(state, location, both_sexes_2012) %>%
filter(both_sexes_2012 == min(both_sexes_2012) & state != "National")
# What is the *maximum* level of binge drinking in each state in 2012 for
# both sexes (across the counties)? Your answer should contain roughly 50 values
# (one for each state), unless there are two counties in a state with the
# same value. Your answer should be a *dataframe* with the location, state, and
# 2012 binge drinking rate. Write this to a file called `max_binge.csv`.
maximum_binge <- group_by(binge_drinking, state) %>%
select(state, location, both_sexes_2012) %>%
filter(both_sexes_2012 == max(both_sexes_2012) & state != "National")
################################# Joining Data #################################
# You'll often have to join different datasets together in order to ask more
# involved questions of your dataset. In order to join our datasets together,
# you'll have to rename their columns to differentiate them.
# First, rename all prevalence columns in the any_drinking dataset to the
# have prefix "any_" (i.e., `males_2002` should now be `any_males_2002`)
# Hint: you can get (and set!) column names using the colnames function.
# This may take multiple lines of code.
column_names <- colnames(any_drinking[,-(1:2)])
fixed_colname <- c(c("state", "location"), paste0("any_", column_names))
colnames(any_drinking) <- fixed_colname
# Then, rename all prevalence columns in the binge_drinking dataset to the have
# the prefix "binge_" (i.e., `males_2002` should now be `binge_males_2002`)
# This may take multiple lines of code.
column_names <- colnames(binge_drinking[,-(1:2)])
fixed_colname <- c(c("state", "location"), paste0("binge_", column_names))
colnames(binge_drinking) <- fixed_colname
# Then, create a dataframe by joining together the both datasets.
# Think carefully about the *type* of join you want to do, and what the
# *identifying columns* are. You will use this (joined) data to answer the
# questions below.
full_drinking <- full_join(binge_drinking, any_drinking,
by = c("state", "location"))
# Create a column `diff_2012` storing the difference between `any` and `binge`
# drinking for both sexes in 2012
full_drinking <- mutate(full_drinking,
diff_2012 = any_both_sexes_2012 - binge_both_sexes_2012)
# Which location has the greatest *absolute* difference between `any` and
# `binge` drinking? Your answer should be a one row data frame with the state,
# location, and column of interest (diff_2012).
# Write this dataframe to `biggest_abs_diff_2012.csv`.
select(full_drinking, state, location, diff_2012) %>%
filter(abs(diff_2012) == max(abs(diff_2012))) %>%
write.csv("output/biggest_abs_diff_2012.csv", row.names = FALSE)
# Which location has the smallest *absolute* difference between `any` and
# `binge` drinking? Your answer should be a one row data frame with the state,
# location, and column of interest (diff_2012).
# Write this dataframe to `smallest_abs_diff_2012.csv`.
select(full_drinking, state, location, diff_2012) %>%
filter(abs(diff_2012) == min(abs(diff_2012))) %>%
write.csv("output/smallest_abs_diff_2012.csv", row.names = FALSE)
############## Write a function to ask your own question(s) ####################
# Even in an entry level data analyst role, people are expected to come up with
# their own questions of interest (not just answer the questions that other
# people have). For this section, you should *write a function* that allows you
# to ask the same question on different subsets of data. For example, you may
# want to ask about the highest/lowest drinking level given a state or year.
# The purpose of your function should be evident given the input parameters and
# function name. After writing your function, *demonstrate* that the function
# works by passing in different parameters to your function.
state_male_any_drinking_plot <- function(state_name) {
full_state_only <- filter(any_drinking, state == location) %>%
select(-location) %>%
select(state, starts_with("any_males"))
data <-
as.numeric(
as.vector(
filter(full_state_only, state == state_name)[1,] %>% select(-1)))
plot(
c(2002:2012),
data,
type = "b",
main = paste(state_name, "State Male Drinking Change"),
sub = "(From 2002 to 2012)",
xlab = "Year",
ylab = "Drinking Percentage",
col = "red"
)
}
state_male_any_drinking_plot("California")
state_male_any_drinking_plot("Utah")
state_male_any_drinking_plot("Washington")
################################### Challenge ##################################
# Using your function from part 1 that wrote a .csv file given a state name,
# write a separate file for each of the 51 states (including Washington D.C.)
# The challenge is to do this in a *single line of (very concise) code*
for (ste in unique(filter(any_drinking, state != "National") %>%
select(state))[,1]) get_state_data(ste)
# Write a function that allows you to pass in a *dataframe* (i.e., in the format
# of binge_drinking or any_drinking) *year*, and *state* of interest. The
# function should saves a .csv file with observations from that state's counties
# (and the state itself). It should only write the columns `state`, `location`,
# and data from the specified year. Before writing the .csv file, you should
# *sort* the data.frame in descending order by the both_sexes drinking rate in
# the specified year. The file name should have the format:
# `DRINKING_STATE_YEAR.csv` (i.e. `any_Utah_2005.csv`).
# To write this function, you will either have to use a combination of dplyr
# and base R, or confront how dplyr uses *non-standard evaluation*
# Hint: https://github.com/tidyverse/dplyr/blob/34423af89703b0772d59edcd0f3485295b629ab0/vignettes/nse.Rmd
# Hint: https://www.r-bloggers.com/non-standard-evaluation-and-standard-evaluation-in-dplyr/
# Create the file `binge_Colorado_2007.csv` using your function.
library(lintr)
lint(assignment.r)
lint("assignment.r")
lint("assignment.R")
lint("assignment.R")
lint("assignment.R")
lint("assignment.R")
```
---
title: "Non-standard evaluation"
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
%\VignetteIndexEntry{Non-standard evaluation}
%\VignetteEngine{knitr::rmarkdown}
%\usepackage[utf8]{inputenc}
---
```{r, echo = FALSE, message = FALSE}
knitr::opts_chunk$set(collapse = T, comment = "#>")
options(tibble.print_min = 4L, tibble.print_max = 4L)
library(dplyr)
```
Dplyr uses non-standard evaluation (NSE) in all the important single table verbs: `filter()`, `mutate()`, `summarise()`, `arrange()`, `select()` and `group_by()`. NSE is important not only because it reduces typing; for database backends, it's what makes it possible to translate R code into SQL. However, while NSE is great for interactive use it's hard to program with. This vignette describes how you can opt out of NSE in dplyr, and instead (with a little quoting) rely only on standard evaluation (SE).
Behind the scenes, NSE is powered by the [lazyeval](https://github.com/hadley/lazyeval) package. The goal is to provide an approach to NSE that you can learn once and then apply in many places (dplyr is the first of my packages to use this approach, but over time I will implement it everywhere). You may want to read the lazyeval vignettes, if you'd like to learn more about the underlying details, or if you'd like to use this approach in your own packages.
## Standard evaluation basics
Every function in dplyr that uses NSE also has a version that uses SE. The name of the SE version is always the NSE name with an `_` on the end. For example, the SE version of `summarise()` is `summarise_()`; the SE version of `arrange()` is `arrange_()`. These functions work very similarly to their NSE cousins, but their inputs must be "quoted":
```{r}
# NSE version:
summarise(mtcars, mean(mpg))
# SE versions:
summarise_(mtcars, ~mean(mpg))
summarise_(mtcars, quote(mean(mpg)))
summarise_(mtcars, "mean(mpg)")
```
There are three ways to quote inputs that dplyr understands:
* With a formula, `~ mean(mpg)`.
* With `quote()`, `quote(mean(mpg))`.
* As a string: `"mean(mpg)"`.
It's best to use a formula because a formula captures both the expression to evaluate and the environment where the evaluation occurs. This is important if the expression is a mixture of variables in a data frame and objects in the local environment:
```{r}
constant1 <- function(n) ~n
summarise_(mtcars, constant1(4))
```
```{r, error = TRUE, purl = FALSE}
# Using anything other than a formula will fail because it doesn't
# know which environment to look in
constant2 <- function(n) quote(n)
summarise_(mtcars, constant2(4))
```
## Setting variable names
If you also want output variables to vary, you need to pass a list of quoted objects to the `.dots` argument:
```{r}
n <- 10
dots <- list(~mean(mpg), ~n)
summarise_(mtcars, .dots = dots)
summarise_(mtcars, .dots = setNames(dots, c("mean", "count")))
```
## Mixing constants and variables
What if you need to mingle constants and variables? Use the handy `lazyeval::interp()`:
```{r}
library(lazyeval)
# Interp works with formulas, quoted calls and strings (but formulas are best)
interp(~ x + y, x = 10)
interp(quote(x + y), x = 10)
interp("x + y", x = 10)
# Use as.name if you have a character string that gives a variable name
interp(~ mean(var), var = as.name("mpg"))
# or supply the quoted name directly
interp(~ mean(var), var = quote(mpg))
```
Because [every action in R is a function call](http://adv-r.had.co.nz/Functions.html#all-calls) you can use this same idea to modify functions:
```{r}
interp(~ f(a, b), f = quote(mean))
interp(~ f(a, b), f = as.name("+"))
interp(~ f(a, b), f = quote(`if`))
```
If you already have a list of values, use `.values`:
```{r}
interp(~ x + y, .values = list(x = 10))
# You can also interpolate variables defined in the current
# environment, but this is a little risky becuase it's easy
# for this to change without you realising
y <- 10
interp(~ x + y, .values = environment())
```
rmarkdown::render()
rmarkdown::render(example.rmd)
setwd("~/")
rmarkdown::render(example.rmd)
setwd("~/Desktop")
rmarkdown::render(example.rmd)
rmarkdown::render("example.rmd")
setwd("~/")
rmarkdown::render("example.rmd")
order(desc(state_only$both_sexes_2012))
df <- select(binge_drinking, state, location, ends_with(toString(2002)))
df <- order(desc(binge_drinking$ends_with(paste0("both_sex_", year))))
View(df)
desc(binge_drinking$ends_with(paste0("both_sex_", year)))
paste0("both_sex_", year)
desc(binge_drinking$ends_with(paste0("both_sex_", 2002)))
binge_drinking$ends_with(paste0("both_sex_", 2002))
paste0("both_sex_", 2002)
desc(binge_drinking$ends_with(paste0("both_sexes_", 2002)))
binge_drinking$ends_with(paste0("both_sexes_", 2002))
df <- df[order(desc(df$ends_with(paste0("both_sex_", 2002))))]
df <- df[order(-df$ends_with(paste0("both_sex_", 2002)))]
?ends_with
??ends_with
?dplyr::ends_with
?tidyverse::ends_with
??ends_with
vars_select()
# function should saves a .csv file with observations from that state's counties
# (and the state itself). It should only write the columns `state`, `location`,
# and data from the specified year. Before writing the .csv file, you should
# *sort* the data.frame in descending order by the both_sexes drinking rate in
# the specified year. The file name should have the format:
# `DRINKING_STATE_YEAR.csv` (i.e. `any_Utah_2005.csv`).
# To write this function, you will either have to use a combination of dplyr
# and base R, or confront how dplyr uses *non-standard evaluation*
# Hint: https://github.com/tidyverse/dplyr/blob/34423af89703b0772d59edcd0f3485295b629ab0/vignettes/nse.Rmd
# Hint: https://www.r-bloggers.com/non-standard-evaluation-and-standard-evaluation-in-dplyr/
library(tidyselect)
vars_select()
?vars_select()
vars_select(ends_with(state_only, "both_sexes_2002"))
vars_select(ends_with(state_only[,1], "both_sexes_2002"))
state_only$ends_with("2002")
column_of_choice <- ends_with(paste0("both_sex_", 2002))
column_of_choice <- colnames(select(df, ends_with(paste0("both_sex_", year))))
column_of_choice <- colnames(select(binge_drinking, ends_with(paste0("both_sex_", 2002))))
colnames(select(binge_drinking, ends_with(paste0("both_sex_", 2002))))
select(binge_drinking, ends_with(paste0("both_sex_", 2002)))
View(select(binge_drinking, ends_with(paste0("both_sex_", 2002))))
View(select(binge_drinking, ends_with(paste0("both_sexes_", 2002))))
column_of_choice <- colnames(select(binge_drinking, ends_with(paste0("both_sexes_", 2002))))
df <- select(df, state, location, ends_with(toString(year)))
column_of_choice <- colnames(select(df, ends_with(paste0("both_sexes_", year))))
df <- df[order(-df$column_of_choice)]
df <- select(binge_drinking, state, location, ends_with(toString(year)))
column_of_choice <- colnames(select(binge_drinking, ends_with(paste0("both_sexes_", year))))
df <- df[order(-df$column_of_choice)]
df <- select(binge_drinking, state, location, ends_with(toString(2002)))
column_of_choice <- colnames(select(binge_drinking, ends_with(paste0("both_sexes_", 2002))))
df <- df[order(-df$column_of_choice)]
df <- df[order(desc(df$column_of_choice))]
View(df)
df <- select(binge_drinking, state, location, ends_with(toString(2002)))
column_of_choice <- colnames(select(df, ends_with(paste0("both_sexes_", 2002))))
View(df)
df[order(desc(df$column_of_choice))]
View(df)
View(df)
df[order(desc(df$toString(column_of_choice)))]
df[order(desc(select(column_of_choice)))]
df[order(desc(select(df, column_of_choice)))]
df[order(desc(select(df, toString(column_of_choice))))]
a <- "state"
binge_drinking$a
binge_drinking[a]
df[order(desc(df[column_of_choice]))]
df[column_of_choice]
df[order(-column_of_choice)]
df[order(desc(column_of_choice))]
View(df)
df <- df[order(desc(column_of_choice))]
View(df)
library("httr")
?GET
?GET
library(shiny)
runExample("01_hello")
shiny::runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
?h1
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
# Exercise 1: building a Shiny user interface
library(shiny)
ui <- fluidPage(
h1("hello, world", em("First Shiny App")),
h3("Week 8, INFO 201"),
hr(),
h4("I am ", strong("somewhat "), "excited about shiny"),
img(src = "https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif"),
p("I am very excited about sliders"),
sliderInput(inputId = "my_slider",
label = h3("Slider"),
min = 0,
max = 100,
value = 50),
textOutput(output$message)
)
server <- function(input, output) {
output$message <- renderText({
msg <- paste("The value of the slider is", input$my_slider)
return(msg)
})
}
shinyApp(ui, server)
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-1')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-2')
source('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/exercises-ColsonXu/chapter-19-exercises/exercise-4/app_ui.R')
shiny::runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/a8-ColsonXu')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/a8-ColsonXu')
shiny::runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/a8-ColsonXu')
shiny::runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/Final-Project')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/Final-Project')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/Final-Project')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/Final-Project')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/Final-Project')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/Final-Project')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/Final-Project')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/Final-Project')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/Final-Project')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/Final-Project')
runApp('/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/Final-Project')
library(plotly)
View(df)
major_enrollment <- read.csv("data/major_enrollment.csv", stringsAsFactors = F)
setwd("/media/colsonxu/Users/found/Google Drive/University of Washington/2019/Winter 2019/INFO 201/Final-Project")
major_enrollment <- read.csv("data/major_enrollment.csv", stringsAsFactors = F)
plot_ly(
x = major_enrollment$perc_female,
y = major_enrollment$median_pay,
type = "scatter",
mode = "markers"
)
library(shiny)
runApp()
runApp()
runApp()
?lm
runApp()
runApp()
??add_lines
lm(major_enrollment$median_pay)
?lm
?fitted
runApp()
runApp()
loess(
major_enrollment$median_pay ~ major_enrollment$perc_female)
loess(major_enrollment$perc_female ~ major_enrollment$median_pay)
loess(major_enrollment$perc_female)
x <- "51.34%"
x[1:length(x) - 1]
View(major_enrollment)
length(x)
length(x[1])
character(x)
x
character(x[[1]])
x[[1]]
perc_to_double <- function(x) {
as.numeric(gsub("%", "", x)) / 100
}
perc_to_double(x)
runApp()
runApp()
major_enrollment$perc_female <- perc_to_double(major_enrollment$perc_female)
runApp()
runApp()
runApp()
runApp()
runApp()
paste0(round(x, 4), "%")
paste0(round(4, x), "%")
double_to_perc <- function(x) {
paste0(round(x, 4), "%")
}
double_to_perc(0.5345)
double_to_perc <- function(x) {
paste0(round(x, 4) * 100, "%")
}
double_to_perc(0.5345)
major_enrollment$perc_female_num <-
perc_to_double(major_enrollment$perc_female)
major_enrollment <- read.csv("data/major_enrollment.csv", stringsAsFactors = F)
major_enrollment$perc_female_num <-
perc_to_double(major_enrollment$perc_female)
major_enrollment <- read.csv("data/major_enrollment.csv", stringsAsFactors = F)
runApp()
runApp()
perc_to_double(major_enrollment$median_pay)
perc_to_double(major_enrollment$median_pay)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ignore_outlier <- major_enrollment %>%
filter(major != "Nursing")
runApp()
runApp()
View(ignore_outlier)
runApp()
runApp()
runApp()
?loess
runApp()
runApp()
runApp()
View(major_enrollment)
runApp()
runApp()
